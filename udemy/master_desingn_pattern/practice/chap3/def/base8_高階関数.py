# ******************************************************************************
# Course      : デザインパターン・マスター講座
# Chapter     : 3 Python基本文法講座
# Theme       : 48 高階関数
# Creat Date  : 2022/2/5
# Final Update:
# URL         : https://www.udemy.com/course/python-mx/
# ******************************************************************************


# ＜高階関数とは＞
# - 関数の引数に関数を取るような関数のこと
#   --- map()が典型例（演算処理を複数行にわたって実行するなど）


# ＜目次＞
# 1 オブジェクトとしての関数
# 2 関数をリストに格納する
# 3 関数を引数として渡す
# 4 関数を戻り値として返す


# 1 オブジェクトとしての関数 --------------------------------------------

# ＜ポイント＞
# - 関数は数値と同じくオブジェクトの1つなのでコピーや参照のような操作ができる


# 関数定義
def print_hello():
    print('hello')

# 関数の参照
# --- 新しい関数オブジェクトを作成
say_hallo = print_hello

# 関数実行
print_hello()
say_hallo()


# 2 関数をリストに格納する ----------------------------------------------

# ＜ポイント＞
# - 関数は数値と同じくオブジェクトの1つなのでリストに格納することも可能


# 関数定義1
def print_hello():
    print('hello')

# 関数定義2
def print_goodbye():
    print('goodbye')

# リストに格納
var = ['AA', 'BB', print_hello, print_goodbye]

# 確認
print(var)
print(var[2])

# 関数実行
var[2]()
var[3]()


# 3 関数を引数として渡す -----------------------------------------------

# ＜ポイント＞
# - 高階関数の役割の1つは引数として関数を渡すこと
#   --- map()の仕組みを理解するために必要


# 関数定義
# --- 引数となる関数
def print_world(msg):
    print('{} world'.format(msg))

# 関数定義
# --- 実行する関数
def print_hello(func):
    func('hello')

# 関数実行
print_hello(print_world)


# 4 関数を戻り値として返す -------------------------------------------

# ＜ポイント＞
# - 関数の戻り値として関数を返すことも可能
#   --- ラッパー関数のように条件によって関数の振舞いを変えたい場合に有効


# 関数定義
# --- 戻り値となる関数
def print_konnichiwa():
    print('こんにちは')

# 関数定義
# --- 実行する関数
def print_hello():
    return print_konnichiwa

# 関数実行
var = print_hello()
var()
