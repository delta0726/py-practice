# ******************************************************************************
# Course      : Python3.8マスター講座
# Chapter     : 6 基本的な標準ライブラリ
# Theme       : randomモジュール
# Creat Date  : 2022/2/13
# Final Update:
# URL         : https://www.udemy.com/course/python-python/
# ******************************************************************************


# ＜概要＞
# - 乱数生成やランダム抽出などを行うモジュールを提供する


# ＜参考＞
# 公式ドキュメント
# https://docs.python.org/ja/3/library/random.html


# ＜目次＞
# 0 準備
# 1 単一の乱数生成
# 2 ランダムな並び替え
# 3 単一要素のランダム抽出
# 4 複数要素のランダム抽出(重複あり)
# 5 複数要素のランダム抽出(重複なし)
# 6 確率分布からの乱数生成
# 7 乱数シードの固定


# 0 準備 --------------------------------------------------------

# ライブラリ
import random


# 1 単一の乱数生成 -----------------------------------------------

# 整数の乱数生成
# --- 0~4の範囲でランダムな整数
n = random.randint(0, 5)
print(n)

# 小数の乱数生成
# --- 0~1の範囲でランダムな浮動小数点数
n = random.random()
print(n)


# 2 ランダムな並び替え -------------------------------------------

# リストの生成
list_a = [1, 2, 3, 4, 5, 6]

# ランダムな並び替え
random.shuffle(list_a)

# 確認
print(list_a)


# 3 単一要素のランダム抽出 -------------------------------------

# ＜ポイント＞
# - オブジェクトの中から1つの要素をランダムに抽出する


# リストの生成
list_b = list(range(6))

# ランダムな抽出
a = random.choice(list_b)

# 確認
print(a)


# 4 複数要素のランダム抽出(重複あり) -----------------------------

# ＜ポイント＞
# - choices()を使うとオブジェクトから重複ありで複数要素のランダム抽出する
#   --- choice()が1要素に対して、choices()は複数要素を選択できる


# リストの生成
list_c = list(range(6))

# ランダムな抽出
c = random.choices(list_c, k=5)

# 確認
print(c)


# 5 複数要素のランダム抽出(重複なし) -----------------------------

# ＜ポイント＞
# - sample()を使うとオブジェクトから重複なしで複数要素のランダム抽出する
#   --- オブジェクトの要素数を超えたkを指定することはできない

# リストの生成
list_d = list(range(6))

# ランダムな抽出
d = random.sample(list_d, k=5)

# 確認
print(d)


# 6 確率分布からの乱数生成 -------------------------------------

# ＜ポイント＞
# - 確率分布からの乱数生成するメソッドも用意されている
#   --- numpyにも確率分布に基づく乱数生成モジュールが含まれる


# ガウス乱数
# --- ガウス分布からランダムサンプリング
# --- 平均値、標準偏差
print(random.gauss(0, 2))

# 正規乱数
# --- 正規分布からランダムサンプリング
print(random.normalvariate(0, 1))



# 7 乱数シードの固定 ------------------------------------------

# ＜ポイント＞
# - 同じ乱数を生成したい場合にはシードを設定する
#   --- デフォルトは時間になっているが、整数値を与えることで固定できる

# 試行1
random.seed(1)
for x in range(3):
    print(random.random())

# 試行2
random.seed(1)
for x in range(3):
    print(random.random())
