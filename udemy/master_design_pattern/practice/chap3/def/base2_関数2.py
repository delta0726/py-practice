# ******************************************************************************
# Course      : デザインパターン・マスター講座
# Chapter     : 3 Python基本文法講座
# Theme       : 40 関数2（応用）
# Creat Date  : 2022/2/4
# Final Update:
# URL         : https://www.udemy.com/course/python-mx/
# ******************************************************************************


# ＜目次＞
# 1 引数のデフォルト値
# 2 可変長タプルの引数
# 3 可変長辞書の引数
# 4 可変長タプルと可変長辞書を同時に使用
# 5 複数の戻り値を持つ関数


# 1 引数のデフォルト値 -----------------------------------------------

# 関数定義
def sample(arg1, arg2=100):
    print(arg1, arg2)

# 関数実行
# --- arg2を指定しない場合はデフォルト値が適用される
# --- arg2を指定した場合は入力値が適用される
sample(200)
sample(200, 300)


# 2 可変長タプルの引数 ------------------------------------------------

# ＜ポイント＞
# - 引数に可変長タプル(*arg2)を指定すると、割り当てられた引数以外はタプルに格納される
#   --- 引数の最後に指定するのがセオリー（1つしか指定できない）
#   --- 引数名を指定した場合はエラーなる


# 関数定義
def spam(arg1, *arg2):
    print("arg1 = {}, arg2 = {}".format(arg1, arg2))
    print(type(arg2))

# 関数実行
# --- 問題なく動作
# --- 引数名を指定した場合はエラー
spam(1, 2, 3, 4, 5)
spam(arg1=1, arg2=2, arg3=3, arg4=4, arg5=5)


# 3 可変長辞書の引数 ------------------------------------------------

# ＜ポイント＞
# - 引数に可変長辞書(**arg2)を指定すると、割り当てられた引数以外は辞書に格納される
#   --- 引数の最後に指定するのがセオリー（1つしか指定できない）
#   --- 引数名がキー、引数が値となって辞書が形成される
#   --- 引数名を指定しない場合はエラーとなる


# 関数定義
def spam_2(arg1, **arg2):
    print('arg1 = {}, arg2 = {}'.format(arg1, arg2))
    print(type(arg2))

# 関数実行
# --- 問題なく動作
# --- 引数名を指定しない場合はエラー
spam_2(3, name='Taro', age=20)
spam_2(3, 'Taro', 20)


# 4 可変長タプルと可変長辞書を同時に使用 -------------------------------

# ＜ポイント＞
# - 引数名を指定しないものはタプル、引数名を指定したものは辞書に格納される
#   --- 可変長タプル⇒可変長辞書の順で指定する
#   --- 実行側では関数の引数に沿った順番でしていないとエラーとなる


# 関数定義
def spam_3(arg1, *arg2, **arg3):
    print(arg1, arg2, arg3)
    print(type(arg2))
    print(type(arg3))


# 関数実行
spam_3(1, 2, 3, 4, 5, name='Taro', age=15)

# 参考
# --- 関数の引数に沿った順番でしていないとエラーとなる
# spam_3(1, 2, 3, 4, name='Taro', 5, age=15)


# 5 複数の戻り値を持つ関数 -------------------------------------------

# ＜ポイント＞
# - 関数の出力値はタプルで複数指定することができる
#   --- 関数の受取側も出力数に合わせたタプルで受ける必要がある


# 関数定義
def sample_2():
    return 1, 2, 3

# 関数実行
a, b, c = sample_2()
print(a, b, c)
